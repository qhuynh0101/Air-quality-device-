/*
 Measures co2, humidity, temperature, pm, and no2
 Setup: starts SD Card and starts the co2 and pm sensors following the example code
 if the named file does not exist, it is created and data labels are added to the top of the file

 each loop opens the file, moves the servo to the inside position and polls all of the sensors while writing to the sd card. it then turns 
 to the outside and polls/writes again. the servo then turns to the neutral position and the file closes.
 there is a delay between each loop starting

*/

#include <SPI.h>
#include <SD.h>
#include <Arduino.h>
#include <SensirionI2cScd30.h>
#include <SensirionI2CSen5x.h>
#include <Servo.h>
#include <Wire.h>

#define MAXBUF_REQUIREMENT 48

#if (defined(I2C_BUFFER_LENGTH) &&                 \
     (I2C_BUFFER_LENGTH >= MAXBUF_REQUIREMENT)) || \
    (defined(BUFFER_LENGTH) && BUFFER_LENGTH >= MAXBUF_REQUIREMENT)
#define USE_PRODUCT_INFO
#endif

#define SERV_INSIDE 0
#define SERV_OUTSIDE 185 //these will depend on the orientation of the device
#define SERV_IDLE 90
#define SERV_PIN 6 

SensirionI2cScd30 sensor;
SensirionI2CSen5x sen5x;
Servo valveServo;
File myFile;

const char fileName[] = "envdata523.txt"; //does not like capital letters
const unsigned long measurementGap = (30*60*1000); //minutes
static char errorMessage[128];
static int16_t error;

void setup() {
  valveServo.attach(SERV_PIN);
  // Open serial communications and wait for port to open:

  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }


  Serial.print("Initializing SD card...");

  if (!SD.begin(4)) {
    Serial.println("initialization failed!");
    while (1);
  }
  Serial.println("initialization done.");

  {
    Wire.begin();
    sensor.begin(Wire, SCD30_I2C_ADDR_61);
  {
    sensor.stopPeriodicMeasurement();
    sensor.softReset();
    delay(2000);
    uint8_t major = 0;
    uint8_t minor = 0;
    error = sensor.readFirmwareVersion(major, minor);
    if (error != NO_ERROR) {
        Serial.print("Error trying to execute readFirmwareVersion(): ");
        errorToString(error, errorMessage, sizeof errorMessage);
        Serial.println(errorMessage);
        return;
    }
    Serial.print("firmware version major: ");
    Serial.print(major);
    Serial.print(",");
    Serial.print("minor: ");
    Serial.print(minor);
    Serial.println();
    error = sensor.startPeriodicMeasurement(0);
    if (error != NO_ERROR) {
        Serial.print("Error trying to execute startPeriodicMeasurement(): ");
        errorToString(error, errorMessage, sizeof errorMessage);
        Serial.println(errorMessage);
        return;
    }
  }
  {
  Serial.println("Setting up PM Sensor");
  sen5x.begin(Wire);
  float tempOffset = 0.0;
      error = sen5x.setTemperatureOffsetSimple(tempOffset);
      if (error) {
          Serial.print("Error trying to execute setTemperatureOffsetSimple(): ");
          errorToString(error, errorMessage, 256);
          Serial.println(errorMessage);
      } else {
          Serial.print("Temperature Offset set to ");
          Serial.print(tempOffset);
          Serial.println(" deg. Celsius (SEN54/SEN55 only)");
      }
    }



  }
  // Start Measurement
      error = sen5x.startMeasurement();
      if (error) {
          Serial.print("Error trying to execute startMeasurement(): ");
          errorToString(error, errorMessage, 256);
          Serial.println(errorMessage);
      }


  // open the file. note that only one file can be open at a time,
  // so you have to close this one before opening another.
  
  //TODO: Place categories at the top if the file does not exist, else continue on
  if(!SD.exists(fileName)){
    myFile = SD.open(fileName, FILE_WRITE);
    myFile.println("inPm1p0,inPm2p5,inPm4p0,inPm10p0,inAmbientHumidity,inAmbientTemperature,inco2Concentration,intemperature,inhumidity,inNO2,outPm1p0,outPm2p5,outPm4p0,outPm10p0,outAmbientHumidity,outAmbientTemperature,outco2Concentration,outtemperature,outhumidity,outNO2,Time");
    myFile.close();
  }
  
  pinMode(A0, INPUT);
}

void loop() {
  // nothing happens after setup
  unsigned long measurementStartTime = millis();
  myFile = SD.open(fileName, FILE_WRITE);

  valveServo.write(SERV_INSIDE);
  delay(3*60000); //time to flush air and turn valveServo
  //measure inside
  ReadPMSensor();
  ReadCO2Sensor();
  myFile.print(analogRead(A0));
  myFile.print(",");

  valveServo.write(SERV_OUTSIDE);
  delay(60000*3); //time to flush air and turn valveServo
  //measure outside
  ReadPMSensor();
  ReadCO2Sensor();
  myFile.print(analogRead(A0));
  myFile.print(",");

  valveServo.write(SERV_IDLE);

  //myFile.print("Time: ");
  unsigned int measurementMins = measurementStartTime/60000;
  myFile.print(measurementMins/60);//hr
  myFile.print(":");
  myFile.println(measurementMins%60);//min

  Serial.println(myFile); //a Serial output to check if the file is working
  myFile.close();

  delay(measurementGap-(millis()-measurementStartTime));//time in minutes

  if((measurementStartTime/1000/60/60)>10){//10 hours
    myFile.close();
    Serial.println("Measurement Finished");
    while(1);
  }
}

float ReadCO2Sensor(){
    // nothing happens after setup
    float co2Concentration = 0.0;
    float temperature = 0.0;
    float humidity = 0.0;
    error = sensor.blockingReadMeasurementData(co2Concentration, temperature, humidity);
    if (error != NO_ERROR) {
        myFile.print("Error trying to execute blockingReadMeasurementData(): ");
        errorToString(error, errorMessage, sizeof errorMessage);
        myFile.println(errorMessage);
        return;
    }

   // myFile.print("co2Concentration: ");
    myFile.print(co2Concentration);
    myFile.print(",");
    //myFile.print("temperature: ");
    myFile.print(temperature);
    myFile.print(",");
    //myFile.print("humidity: ");
    myFile.print(humidity);
    myFile.print(",");
    return 1.0;
}

void ReadPMSensor(){
    uint16_t error;
    char errorMessage[256];
    
    // Read Measurement
    float Pm1p0;
    float Pm2p5;
    float Pm4p0;
    float Pm10p0;
    float ambientHumidity;
    float ambientTemperature;
    float vocIndex;
    float noxIndex;

    error = sen5x.readMeasuredValues(
        Pm1p0, Pm2p5, Pm4p0,
        Pm10p0, ambientHumidity, ambientTemperature, vocIndex,
        noxIndex);
    if (error) {
        myFile.print("Error trying to execute readMeasuredValues(): ");
        errorToString(error, errorMessage, 256);
        myFile.println(errorMessage);
    } else if(myFile){
        //myFile.print("Pm1p0:");
        myFile.print(Pm1p0);
        myFile.print(",");
        //myFile.print("Pm2p5:");
        myFile.print(Pm2p5);
        myFile.print(",");
        //myFile.print("Pm4p0:"); 
        myFile.print(Pm4p0);
        myFile.print(",");
        //myFile.print("Pm10p0:");
        myFile.print(Pm10p0);
        myFile.print(",");
        //myFile.print("AmbientHumidity:");
        if (isnan(ambientHumidity)) {
            myFile.print("n/a");
        } else {
            myFile.print(ambientHumidity);
        }
        myFile.print(",");
        //myFile.print("AmbientTemperature:");
        if (isnan(ambientTemperature)) {
            myFile.print("n/a");
        } else {
            myFile.print(ambientTemperature);
        }
        myFile.print(",");
        
    }
}
